###############################################################################
## > Arch Linux                                                              ##
##   These are a series of functions made to update an Arch Linux system via ##
##   pacman.                                                                 ##
##   On certain setups, it can also upgrade AUR packages.                    ##
##                                                                           ##
##   PLEASE NOTE:                                                            ##
##   These functions will take for granted you have root permissions.        ##
##   Any checks regarding that should be done before sourcing this gile.     ##
###############################################################################

source ./lib/utility.zsource

#>>> Update the system trough pacman:
# Any argument given will be used for pacman.
# Should work regardless of system setup.
function update_pacman()
{
  print_prompt "pacman"
 
  # If this command is available, run it.
  # For more info check: https://github.com/Soulsuke/zfs-kernels
  if command -v zfs-kernels-update-repo &> /dev/null; then
    zfs-kernels-update-repo
  fi
 
  # No parameters: standard pacman update.
  if [[ 0 == $# ]]; then
    pacman -Syu --noconfirm

  # Some arguments have been passed: let's throw them at pacman.
  else
    pacman $@
  fi

  # If pkgfile is available, update it as well:
  which pkgfile &> /dev/null
  if [[ 0 == $? ]]; then
    pkgfile -u
  fi
}

#>>> Update all AUR packages:
# This will only work on systems where there's an user called "aur_upgrader"
# who can use pacman with root privileges without being prompted for a
# password.
# To achieve that, add the following line to your sudoers file:
# aur_upgrader ALL=(ALL:ALL) NOPASSWD: /usr/bin/pacman
# Or the following line to doas config:
# permit nopass aur_upgrader as root cmd pacman
function update_aur()
{
  # Because it's cool:
  print_prompt "AUR"

  # Ensure the aur_upgrader user exists:
  id -u aur_upgrader &> /dev/null
  if [[ 0 != $? ]]; then
    print "User aur_upgrader not found! Skipping!"
    return -1;
  fi
 
  # Use the available aur helper:
  if [[ $+commands[paru] ]]; then
    print "Helper: paru"
    su -c "paru --aur -Syu" aur_upgrader
  elif [[ $+commands[yay] ]]; then
    print "Helper: yay"
    su -c "yay --aur --editmenu -Syu" aur_upgrader
  fi

  # At the end, remove any leftovers:
  for i in /home/aur_upgrader/*(D); do
    if [[ ${i} != /home/aur_upgrader/(.|..|.bash*|.config|.gnupg) ]]; then
      rm -fr "${i}" &> /dev/null
    fi
  done
}

#>>> Entry point to update Arch Linux:
# This will handle different cases.
# The first given parameter will be used as the program name,
# the second one for checks.
function update_distro()
{
  # Variables:
  HELP="Usage on Arch Linux:
$1                  : update everything possible
$1 -a/--aur         : only update AUR packages
$1 -p/--pacman      : only update the system through pacman
$1 -i/--independent : only update distro independent software
$1 -h/--help        : show this help reference"

  # First off: every user should be able to use the -h/--help option:
  if [[ 2 == $# && ( "-h" == $2 || "--help" == $2 ) ]]; then
    print $HELP
    return 0
  fi

  # Second: permissions.
  # Not root...
  if [[ "root" != $(whoami) ]]; then
    print -n "$fg[red]ERROR: root privileges are needed to run this script."
    print "$fg[default]"
    return -1
  fi

  # ALWAYS REMEMBER: $1 is always the program name ($0 for main.zsh)!

  # 1 Parameter: update everything.
  if [[ 1 == $# ]]; then
    update_pacman
    # Check for aur_upgrader user:
    su -c true aur_upgrader
    if [[ 0 == $? ]]; then
      print ""
      update_aur
    fi
    print ""
    source ./lib/distro_independent.zsource
    update_independent

  # 2 parameters: gotta perform checks.
  elif [[ 2 == $# ]]; then

    # Only update AUR packages:
    if [[ $2 == "-a" || $2 == "--aur" ]]; then
      # check if the aur_upgrader user exists:
      su -c true aur_upgrader
      if [[ 0 == $? ]]; then
        update_aur
      else
        print "aur_upgrader is not an existing user. Aborting."
      fi

    # Only update the system through pacman:
    elif [[ $2 == "-p" || $2 == "--pacman" ]]; then
      update_pacman

    # Only update distro independent software:
    elif [[ $2 == "-i" || $2 == "--independent" ]]; then
      source ./lib/distro_independent.zsource
      update_independent

    # Unsupported parameter: quit.
    else
      print $HELP
      return -1
    fi

  # Wrong number of parameters: quit.
  else
    print $HELP
    return -1
  fi

  # Unset variables:
  unset HELP

  return 0
}

